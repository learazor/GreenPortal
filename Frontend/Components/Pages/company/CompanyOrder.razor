@page "/company-orders"
@using Entities.model.portal
@using Frontend.service
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@rendermode InteractiveServer

<div class="navbar">
    <button @onclick="GoToDashboard">Dashboard</button>
    <button @onclick="AuthService.HandleLogout">Logout</button>
</div>
<h1>Company Orders</h1>

@if (orders == null)
{
    <p>Loading orders...</p>
}
else if (!orders.Any())
{
    <p>No orders available for your company.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Order ID</th>
            <th>Installation Cost</th>
            <th>Transportation Cost</th>
            <th>Total Cost</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Guid</td>
                <td>@order.InstallationCost</td>
                <td>@order.TransportationCost</td>
                <td>@order.TotalCost</td>
                <td>@order.Status</td>
                <td>
                    @if (order.Status is OrderStatus.OFFERED or OrderStatus.ORDERED)
                    {
                        <button class="btn btn-success" @onclick="() => ChangeOrderStatus(order.Guid, OrderStatus.ACCEPTED)">Accept</button>
                        <button class="btn btn-danger" @onclick="() => ChangeOrderStatus(order.Guid, OrderStatus.CANCELED)">Cancel</button>
                    }
                    else
                    {
                        <span>Action unavailable</span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<OrderViewModel> orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            orders = await HttpClient.GetFromJsonAsync<List<OrderViewModel>>("https://localhost:7066/orders/company");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load orders: {ex.Message}");
        }
    }

    private async Task ChangeOrderStatus(Guid orderId, OrderStatus status)
    {
        try
        {
            var endpoint = status == OrderStatus.ACCEPTED ? "accept-order" : "cancel-order";
            var response = await HttpClient.PostAsync($"https://localhost:7066/orders/{endpoint}?installationOfferId={orderId}", null);

            if (response.IsSuccessStatusCode)
            {
                await LoadOrders();
            }
            else
            {
                Console.WriteLine($"Failed to update order status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order status: {ex.Message}");
        }
    }
    

    private class OrderViewModel
    {
        public Guid Guid { get; set; }
        public double InstallationCost { get; set; }
        public double TransportationCost { get; set; }
        public double TotalCost { get; set; }
        public OrderStatus Status { get; set; }
    }

    private void GoToDashboard()
    {
        NavigationManager.NavigateTo("company-dashboard");
    }

}